/// <reference types="react" />
declare type CleanupFunction = () => void;
export declare type EffectFunction<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent>> = (state: TState, effect: TEffect, dispatch: React.Dispatch<TEvent>) => CleanupFunction | void;
export interface EffectObject<TState, TEvent extends EventObject> {
    [key: string]: any;
    type: string;
    exec?: EffectFunction<TState, TEvent, any>;
}
export declare type Effect<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent>> = TEffect | EffectFunction<TState, TEvent, TEffect>;
export interface EventObject {
    type: string;
    [key: string]: any;
}
declare enum EntityStatus {
    Idle = 0,
    Started = 1,
    Stopped = 2
}
export interface EffectEntity<TState, TEvent extends EventObject> {
    type: string;
    status: EntityStatus;
    start: (state: TState, dispatch: React.Dispatch<TEvent>) => void;
    stop: () => void;
}
export interface EffectReducerExec<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent>> {
    (effect: TEffect | EffectFunction<TState, TEvent, TEffect>): EffectEntity<TState, TEvent>;
    stop: (entity: EffectEntity<TState, TEvent>) => void;
    replace: (entity: EffectEntity<TState, TEvent> | undefined, effect: TEffect | EffectFunction<TState, TEvent, TEffect>) => EffectEntity<TState, TEvent>;
}
export declare type EffectReducer<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent> = EffectObject<TState, TEvent>> = (state: TState, event: TEvent, exec: EffectReducerExec<TState, TEvent, TEffect>) => TState;
export declare function toEffect<TState, TEvent extends EventObject>(exec: EffectFunction<TState, TEvent, any>): Effect<TState, TEvent, any>;
export declare type EffectsMap<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent>> = {
    [key in TEffect['type']]: EffectFunction<TState, TEvent, TEffect & {
        type: key;
    }>;
};
export declare type InitialEffectStateGetter<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, any>> = (exec: (effect: TEffect | EffectFunction<TState, any, TEffect>) => EffectEntity<TState, TEvent>) => TState;
export declare function useEffectReducer<TState, TEvent extends EventObject, TEffect extends EffectObject<TState, TEvent> = EffectObject<TState, TEvent>>(effectReducer: EffectReducer<TState, TEvent, TEffect>, initialState: TState | InitialEffectStateGetter<TState, TEvent, TEffect>, effectsMap?: EffectsMap<TState, TEvent, TEffect>): [TState, React.Dispatch<TEvent | TEvent['type']>];
export {};
