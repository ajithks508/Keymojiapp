{"ast":null,"code":"export var getFloatVal = function getFloatVal(string) {\n  var floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport var addFirstProduct = function addFirstProduct(products) {\n  var productPrice = getFloatVal(products.price);\n  var newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  var newProduct = createNewProduct(product, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('woo-next-cart', JSON.stringify(newCart));\n  return newCart;\n};\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\n\nexport var createNewProduct = function createNewProduct(product, productPrice, qty) {\n  return {\n    productId: product.productId,\n    image: product.image,\n    name: product.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};","map":{"version":3,"sources":["C:/Users/ajith/Desktop/keymoji/functions.js"],"names":["getFloatVal","string","floatValue","match","parseFloat","toFixed","addFirstProduct","products","productPrice","price","newCart","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","product","push","localStorage","setItem","JSON","stringify","qty","productId","image","name","totalPrice"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAEC,MAAF,EAAc;AAExC,MAAIC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAc,mBAAd,EAAoC,CAApC,CAAjB;AACA,SAAS,SAASD,UAAX,GAA0BE,UAAU,CAAEA,UAAU,CAAEF,UAAF,CAAV,CAAyBG,OAAzB,CAAkC,CAAlC,CAAF,CAApC,GAAgF,EAAvF;AAEA,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAEC,QAAF,EAAgB;AAE9C,MAAIC,YAAY,GAAGR,WAAW,CAAEO,QAAQ,CAACE,KAAX,CAA9B;AAEA,MAAIC,OAAO,GAAG;AACbH,IAAAA,QAAQ,EAAE,EADG;AAEbI,IAAAA,kBAAkB,EAAE,CAFP;AAGbC,IAAAA,kBAAkB,EAAEJ;AAHP,GAAd;AAMA,MAAMK,UAAU,GAAGC,gBAAgB,CAAEC,OAAF,EAAWP,YAAX,EAAyB,CAAzB,CAAnC;AACAE,EAAAA,OAAO,CAACH,QAAR,CAAiBS,IAAjB,CAAuBH,UAAvB;AAEAI,EAAAA,YAAY,CAACC,OAAb,CAAsB,eAAtB,EAAuCC,IAAI,CAACC,SAAL,CAAgBV,OAAhB,CAAvC;AAEA,SAAOA,OAAP;AACA,CAhBM;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEC,OAAF,EAAWP,YAAX,EAAyBa,GAAzB,EAAkC;AAEjE,SAAQ;AACPC,IAAAA,SAAS,EAAEP,OAAO,CAACO,SADZ;AAEPC,IAAAA,KAAK,EAAER,OAAO,CAACQ,KAFR;AAGPC,IAAAA,IAAI,EAAET,OAAO,CAACS,IAHP;AAIPf,IAAAA,KAAK,EAAED,YAJA;AAKPa,IAAAA,GAAG,EAAHA,GALO;AAMPI,IAAAA,UAAU,EAAErB,UAAU,CAAE,CAAEI,YAAY,GAAGa,GAAjB,EAAuBhB,OAAvB,CAAgC,CAAhC,CAAF;AANf,GAAR;AASA,CAXM","sourcesContent":["export const getFloatVal = ( string ) => {\n\n\tlet floatValue = string.match( /[+-]?\\d+(\\.\\d+)?/g )[0];\n\treturn ( null !== floatValue ) ? parseFloat( parseFloat( floatValue ).toFixed( 2 ) ) : '';\n\n};\n\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\nexport const addFirstProduct = ( products ) => {\n\n\tlet productPrice = getFloatVal( products.price );\n\n\tlet newCart = {\n\t\tproducts: [],\n\t\ttotalProductsCount: 1,\n\t\ttotalProductsPrice: productPrice\n\t};\n\n\tconst newProduct = createNewProduct( product, productPrice, 1 );\n\tnewCart.products.push( newProduct );\n\n\tlocalStorage.setItem( 'woo-next-cart', JSON.stringify( newCart ) );\n\n\treturn newCart;\n};\n\n/**\n * Create a new product object.\n *\n * @param {Object} product Product\n * @param {Integer} productPrice Product Price\n * @param {Integer} qty Quantity\n * @return {{image: *, productId: *, totalPrice: number, price: *, qty: *, name: *}}\n */\nexport const createNewProduct = ( product, productPrice, qty ) => {\n\n\treturn  {\n\t\tproductId: product.productId,\n\t\timage: product.image,\n\t\tname: product.name,\n\t\tprice: productPrice,\n\t\tqty,\n\t\ttotalPrice: parseFloat( ( productPrice * qty ).toFixed( 2 ) )\n\t};\n\n};"]},"metadata":{},"sourceType":"module"}