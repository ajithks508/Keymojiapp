{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ajith\\\\Desktop\\\\keymoji\\\\pages\\\\singleproduct.js\";\nimport { withRouter } from 'next/router';\nimport client from \"../components/ApolloClient\";\nimport PRODUCTS from \"../queries/sinproduct\";\nimport Sproduct from \"../components/sproduct/Sproduct\";\nimport Layout from \"../components/sproduct/Layout\";\nconst singleproduct = withRouter(props => {\n  const {\n    products\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product-container row\",\n        children: undefined !== products && products.length ? products.map(lst => /*#__PURE__*/_jsxDEV(Sproduct, {\n          lst: lst\n        }, lst.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 28\n        }, this)) : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 3\n  }, this);\n});\n\nsingleproduct.getInitialProps = async function (context) {\n  let {\n    query: {\n      slug\n    }\n  } = context;\n  const id = slug ? slug.split('-').pop() : context.query.id;\n  const res = await client.query({\n    query: PRODUCTS_LIST,\n    variables: {\n      id\n    }\n  });\n  return {\n    products: res.data.productCategory.products.nodes\n  };\n};\n\nexport default singleproduct;","map":{"version":3,"sources":["C:/Users/ajith/Desktop/keymoji/pages/singleproduct.js"],"names":["withRouter","client","PRODUCTS","Sproduct","Layout","singleproduct","props","products","undefined","length","map","lst","id","getInitialProps","context","query","slug","split","pop","res","PRODUCTS_LIST","variables","data","productCategory","nodes"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AAEA,MAAMC,aAAa,GAAGL,UAAU,CAAEM,KAAK,IAAI;AAE1C,QAAM;AAAEC,IAAAA;AAAF,MAAeD,KAArB;AAEA,sBACC,QAAC,MAAD;AAAA,2BACC;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA,kBACGE,SAAS,KAAKD,QAAd,IAA0BA,QAAQ,CAACE,MAAnC,GACDF,QAAQ,CAACG,GAAT,CAAcC,GAAG,iBAAI,QAAC,QAAD;AAAyB,UAAA,GAAG,EAAGA;AAA/B,WAAgBA,GAAG,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA,gBAArB,CADC,GAEE;AAHL;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAWA,CAf+B,CAAhC;;AAiBAP,aAAa,CAACQ,eAAd,GAAgC,gBAAgBC,OAAhB,EAA0B;AAEzD,MAAI;AAAEC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AAAT,MAAsBF,OAA1B;AAEA,QAAMF,EAAE,GAAGI,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAY,GAAZ,EAAkBC,GAAlB,EAAH,GAA6BJ,OAAO,CAACC,KAAR,CAAcH,EAA1D;AAEA,QAAMO,GAAG,GAAG,MAAMlB,MAAM,CAACc,KAAP,CAAc;AAC/BA,IAAAA,KAAK,EAAEK,aADwB;AAE/BC,IAAAA,SAAS,EAAE;AAAET,MAAAA;AAAF;AAFoB,GAAd,CAAlB;AAKA,SAAO;AACNL,IAAAA,QAAQ,EAAEY,GAAG,CAACG,IAAJ,CAASC,eAAT,CAAyBhB,QAAzB,CAAkCiB;AADtC,GAAP;AAIA,CAfD;;AAiBA,eAAenB,aAAf","sourcesContent":["import { withRouter } from 'next/router';\r\nimport client from \"../components/ApolloClient\";\r\nimport PRODUCTS from \"../queries/sinproduct\";\r\nimport Sproduct from \"../components/sproduct/Sproduct\";\r\nimport Layout from \"../components/sproduct/Layout\";\r\n\r\nconst singleproduct = withRouter( props => {\r\n\r\n\tconst { products } = props;\r\n\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<div className=\"content-wrap\">\r\n\t\t\t\t<div className=\"product-container row\">\r\n\t\t\t\t\t{ undefined !== products && products.length ? (\r\n\t\t\t\t\t\tproducts.map( lst => <Sproduct key={ lst.id } lst={ lst } /> )\r\n\t\t\t\t\t) : ''}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</Layout>\r\n\t)\r\n});\r\n\r\nsingleproduct.getInitialProps = async function( context ) {\r\n\r\n\tlet { query: { slug } } = context;\r\n\r\n\tconst id = slug ? slug.split( '-' ).pop() : context.query.id;\r\n\r\n\tconst res = await client.query(({\r\n\t\tquery: PRODUCTS_LIST,\r\n\t\tvariables: { id }\r\n\t}));\r\n\r\n\treturn {\r\n\t\tproducts: res.data.productCategory.products.nodes\r\n\t}\r\n\r\n};\r\n\r\nexport default singleproduct;\r\n"]},"metadata":{},"sourceType":"module"}