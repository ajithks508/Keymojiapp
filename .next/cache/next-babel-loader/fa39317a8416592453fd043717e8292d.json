{"ast":null,"code":"export const getFloatVal = string => {\n  let floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport const addFirstProduct = products => {\n  let productPrice = getFloatVal(products.salePrice);\n  let newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  const newProduct = createNewProduct(products, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('keymoji-cart', JSON.stringify(newCart));\n  return newCart;\n};\nexport const createNewProduct = (products, productPrice, qty) => {\n  return {\n    productId: products.productId,\n    image: products.image,\n    name: products.name,\n    price: productPrice,\n    qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\nexport const updateCart = (existingCart, products, qtyToBeAdded, newQty = false) => {\n  const updatedProducts = getUpdatedProducts(existingCart.products, products, qtyToBeAdded, newQty);\n\n  const addPrice = (total, item) => {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  };\n\n  let total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  const updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem('keymoji-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};\nexport const getUpdatedProducts = (existingProductsInCart, products, qtyToBeAdded, newQty = false) => {\n  const productsExistsIndex = isProductInCart(existingProductsInCart, products.productId);\n\n  if (-1 < productsExistsIndex) {\n    let updatedProducts = existingProductsInCart;\n    let updatedProduct = updatedProducts[productsExistsIndex];\n    updatedProduct.qty = newQty ? parseInt(newQty) : parseInt(updatedProduct.qty + qtyToBeAdded);\n    updatedProduct.totalPrice = parseFloat(updatedProduct.price * updatedProduct.qty).toFixed(2);\n    return updatedProducts;\n  } else {\n    let productPrice = getFloatVal(products.salePrice);\n    const newProduct = createNewProduct(products, productPrice, qtyToBeAdded);\n    existingProductsInCart.push(newProduct);\n    return existingProductsInCart;\n  }\n};\nexport const isProductInCart = (existingProductsInCart, productId) => {\n  const returnItemThatExits = (item, index) => {\n    if (productId === DataTransferItem.productId) {\n      return item;\n    }\n  };\n\n  const newArray = existingProductsInCart.filter(returnItemThatExits);\n  return existingProductsInCart.indexOf(newArray[0]);\n};","map":null,"metadata":{},"sourceType":"module"}