{"ast":null,"code":"import fetch from 'node-fetch';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloLink } from \"apollo-link\";\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionQueryResultData from '../fragmentTypes';\nimport clientConfig from './../client-config'; // Fragment matcher.\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData\n});\nexport const middleware = new ApolloLink((operation, forward) => {\n  /**\r\n   * If session data exist in local storage, set value as session header.\r\n   */\n  const session = false ? localStorage.getItem(\"woo-session\") : null;\n\n  if (session) {\n    operation.setContext(({\n      headers = {}\n    }) => ({\n      headers: {\n        \"woocommerce-session\": `Session ${session}`\n      }\n    }));\n  }\n\n  return forward(operation);\n});\n/**\r\n * Afterware operation.\r\n *\r\n * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.\r\n */\n\nexport const afterware = new ApolloLink((operation, forward) => {\n  return forward(operation).map(response => {\n    /**\r\n     * Check for session header and update session in local storage accordingly.\r\n     */\n    const context = operation.getContext();\n    const {\n      response: {\n        headers\n      }\n    } = context;\n    const session = headers.get(\"woocommerce-session\");\n\n    if (session) {\n      // Remove session data if session destroyed.\n      if (\"false\" === session) {\n        localStorage.removeItem(\"woo-session\"); // Update session new data if changed.\n      } else if (localStorage.getItem(\"woo-session\") !== session) {\n        localStorage.setItem(\"woo-session\", headers.get(\"woocommerce-session\"));\n      }\n    }\n\n    return response;\n  });\n}); // Apollo GraphQL client.\n\nconst client = new ApolloClient({\n  link: middleware.concat(afterware.concat(createHttpLink({\n    uri: clientConfig.graphqlUrl,\n    fetch: fetch\n  }))),\n  cache: new InMemoryCache({\n    fragmentMatcher\n  })\n});\nexport default client;","map":{"version":3,"sources":["C:/Users/ajith/Desktop/keymoji/components/ApolloClient.js"],"names":["fetch","ApolloClient","InMemoryCache","createHttpLink","ApolloLink","IntrospectionFragmentMatcher","introspectionQueryResultData","clientConfig","fragmentMatcher","middleware","operation","forward","session","localStorage","getItem","setContext","headers","afterware","map","response","context","getContext","get","removeItem","setItem","client","link","concat","uri","graphqlUrl","cache"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,4BAAT,QAA6C,uBAA7C;AACA,OAAOC,4BAAP,MAAyC,kBAAzC;AAEA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;;AACA,MAAMC,eAAe,GAAG,IAAIH,4BAAJ,CAAiC;AACxDC,EAAAA;AADwD,CAAjC,CAAxB;AAKA,OAAO,MAAMG,UAAU,GAAG,IAAIL,UAAJ,CAAgB,CAAEM,SAAF,EAAaC,OAAb,KAA0B;AACnE;AACD;AACA;AACC,QAAMC,OAAO,GAAG,QAAuBC,YAAY,CAACC,OAAb,CAAsB,aAAtB,CAAvB,GAA+D,IAA/E;;AAEA,MAAKF,OAAL,EAAe;AACdF,IAAAA,SAAS,CAACK,UAAV,CAAsB,CAAE;AAAEC,MAAAA,OAAO,GAAG;AAAZ,KAAF,MAA0B;AAC/CA,MAAAA,OAAO,EAAE;AACR,+BAAwB,WAAWJ,OAAS;AADpC;AADsC,KAA1B,CAAtB;AAKA;;AAED,SAAOD,OAAO,CAAED,SAAF,CAAd;AAEA,CAhByB,CAAnB;AAkBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMO,SAAS,GAAG,IAAIb,UAAJ,CAAgB,CAAEM,SAAF,EAAaC,OAAb,KAA0B;AAElE,SAAOA,OAAO,CAAED,SAAF,CAAP,CAAqBQ,GAArB,CAA0BC,QAAQ,IAAI;AAC5C;AACF;AACA;AACE,UAAMC,OAAO,GAAGV,SAAS,CAACW,UAAV,EAAhB;AACA,UAAM;AAAEF,MAAAA,QAAQ,EAAE;AAAEH,QAAAA;AAAF;AAAZ,QAA6BI,OAAnC;AACA,UAAMR,OAAO,GAAGI,OAAO,CAACM,GAAR,CAAa,qBAAb,CAAhB;;AAEA,QAAKV,OAAL,EAAe;AAEd;AACA,UAAK,YAAYA,OAAjB,EAA2B;AAE1BC,QAAAA,YAAY,CAACU,UAAb,CAAyB,aAAzB,EAF0B,CAI1B;AACA,OALD,MAKO,IAAKV,YAAY,CAACC,OAAb,CAAsB,aAAtB,MAA0CF,OAA/C,EAAyD;AAE/DC,QAAAA,YAAY,CAACW,OAAb,CAAsB,aAAtB,EAAqCR,OAAO,CAACM,GAAR,CAAa,qBAAb,CAArC;AAEA;AACD;;AAED,WAAOH,QAAP;AAEA,GAzBM,CAAP;AA0BA,CA5BwB,CAAlB,C,CAkCP;;AACA,MAAMM,MAAM,GAAG,IAAIxB,YAAJ,CAAiB;AAC/ByB,EAAAA,IAAI,EAAEjB,UAAU,CAACkB,MAAX,CAAmBV,SAAS,CAACU,MAAV,CAAkBxB,cAAc,CAAC;AACzDyB,IAAAA,GAAG,EAAErB,YAAY,CAACsB,UADuC;AAEzD7B,IAAAA,KAAK,EAAEA;AAFkD,GAAD,CAAhC,CAAnB,CADyB;AAK/B8B,EAAAA,KAAK,EAAE,IAAI5B,aAAJ,CAAmB;AAAEM,IAAAA;AAAF,GAAnB;AALwB,CAAjB,CAAf;AAQA,eAAeiB,MAAf","sourcesContent":["import fetch from 'node-fetch';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\nimport { ApolloLink } from \"apollo-link\";\r\nimport { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\r\nimport introspectionQueryResultData from '../fragmentTypes';\r\n\r\nimport clientConfig from './../client-config';\r\n\r\n// Fragment matcher.\r\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\r\n\tintrospectionQueryResultData\r\n});\r\n\r\n\r\nexport const middleware = new ApolloLink( ( operation, forward ) => {\r\n\t/**\r\n\t * If session data exist in local storage, set value as session header.\r\n\t */\r\n\tconst session = ( process.browser ) ?  localStorage.getItem( \"woo-session\" ) : null;\r\n\r\n\tif ( session ) {\r\n\t\toperation.setContext( ( { headers = {} } ) => ( {\r\n\t\t\theaders: {\r\n\t\t\t\t\"woocommerce-session\": `Session ${ session }`\r\n\t\t\t}\r\n\t\t} ) );\r\n\t}\r\n\r\n\treturn forward( operation );\r\n\r\n} );\r\n\r\n/**\r\n * Afterware operation.\r\n *\r\n * This catches the incoming session token and stores it in localStorage, for future GraphQL requests.\r\n */\r\nexport const afterware = new ApolloLink( ( operation, forward ) => {\r\n\r\n\treturn forward( operation ).map( response => {\r\n\t\t/**\r\n\t\t * Check for session header and update session in local storage accordingly.\r\n\t\t */\r\n\t\tconst context = operation.getContext();\r\n\t\tconst { response: { headers } }  = context;\r\n\t\tconst session = headers.get( \"woocommerce-session\" );\r\n\r\n\t\tif ( session ) {\r\n\r\n\t\t\t// Remove session data if session destroyed.\r\n\t\t\tif ( \"false\" === session ) {\r\n\r\n\t\t\t\tlocalStorage.removeItem( \"woo-session\" );\r\n\r\n\t\t\t\t// Update session new data if changed.\r\n\t\t\t} else if ( localStorage.getItem( \"woo-session\" ) !== session ) {\r\n\r\n\t\t\t\tlocalStorage.setItem( \"woo-session\", headers.get( \"woocommerce-session\" ) );\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn response;\r\n\r\n\t} );\r\n} );\r\n\r\n\r\n\r\n\r\n\r\n// Apollo GraphQL client.\r\nconst client = new ApolloClient({\r\n\tlink: middleware.concat( afterware.concat( createHttpLink({\r\n\t\turi: clientConfig.graphqlUrl,\r\n\t\tfetch: fetch\r\n\t}) ) ),\r\n\tcache: new InMemoryCache( { fragmentMatcher } ),\r\n});\r\n\r\nexport default client;\r\n"]},"metadata":{},"sourceType":"module"}