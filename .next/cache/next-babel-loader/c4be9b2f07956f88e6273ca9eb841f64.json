{"ast":null,"code":"export var getFloatVal = function getFloatVal(string) {\n  var floatValue = string.match(/[+-]?\\d+(\\.\\d+)?/g)[0];\n  return null !== floatValue ? parseFloat(parseFloat(floatValue).toFixed(2)) : '';\n};\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\n\nexport var addFirstProduct = function addFirstProduct(products) {\n  var productPrice = getFloatVal(products.salePrice);\n  var newCart = {\n    products: [],\n    totalProductsCount: 1,\n    totalProductsPrice: productPrice\n  };\n  var newProduct = createNewProduct(products, productPrice, 1);\n  newCart.products.push(newProduct);\n  localStorage.setItem('keymoji-cart', JSON.stringify(newCart));\n  return newCart;\n};\nexport var createNewProduct = function createNewProduct(products, productPrice, qty) {\n  return {\n    productId: products.productId,\n    image: products.image,\n    name: products.name,\n    price: productPrice,\n    qty: qty,\n    totalPrice: parseFloat((productPrice * qty).toFixed(2))\n  };\n};\nexport var updateCart = function updateCart(existingCart, product, qtyToBeAdded) {\n  var newQty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var updatedProducts = getUpdatedProducts(existingCart.products, product, qtyToBeAdded, newQty);\n\n  var addPrice = function addPrice(total, item) {\n    total.totalPrice += item.totalPrice;\n    total.qty += item.qty;\n    return total;\n  }; // Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\n\n  var total = updatedProducts.reduce(addPrice, {\n    totalPrice: 0,\n    qty: 0\n  });\n  var updatedCart = {\n    products: updatedProducts,\n    totalProductsCount: parseInt(total.qty),\n    totalProductsPrice: parseFloat(total.totalPrice)\n  };\n  localStorage.setItem('woo-next-cart', JSON.stringify(updatedCart));\n  return updatedCart;\n};","map":{"version":3,"sources":["C:/Users/ajith/Desktop/keymoji/functions.js"],"names":["getFloatVal","string","floatValue","match","parseFloat","toFixed","addFirstProduct","products","productPrice","salePrice","newCart","totalProductsCount","totalProductsPrice","newProduct","createNewProduct","push","localStorage","setItem","JSON","stringify","qty","productId","image","name","price","totalPrice","updateCart","existingCart","product","qtyToBeAdded","newQty","updatedProducts","getUpdatedProducts","addPrice","total","item","reduce","updatedCart","parseInt"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAEC,MAAF,EAAc;AAExC,MAAIC,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAc,mBAAd,EAAoC,CAApC,CAAjB;AACA,SAAS,SAASD,UAAX,GAA0BE,UAAU,CAAEA,UAAU,CAAEF,UAAF,CAAV,CAAyBG,OAAzB,CAAkC,CAAlC,CAAF,CAApC,GAAgF,EAAvF;AAEA,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAEC,QAAF,EAAgB;AAE9C,MAAIC,YAAY,GAAGR,WAAW,CAAEO,QAAQ,CAACE,SAAX,CAA9B;AAEA,MAAIC,OAAO,GAAG;AACbH,IAAAA,QAAQ,EAAE,EADG;AAEbI,IAAAA,kBAAkB,EAAE,CAFP;AAGbC,IAAAA,kBAAkB,EAAEJ;AAHP,GAAd;AAMA,MAAMK,UAAU,GAAGC,gBAAgB,CAAEP,QAAF,EAAYC,YAAZ,EAA0B,CAA1B,CAAnC;AACAE,EAAAA,OAAO,CAACH,QAAR,CAAiBQ,IAAjB,CAAuBF,UAAvB;AAEAG,EAAAA,YAAY,CAACC,OAAb,CAAsB,cAAtB,EAAsCC,IAAI,CAACC,SAAL,CAAgBT,OAAhB,CAAtC;AAEA,SAAOA,OAAP;AACA,CAhBM;AAkBP,OAAO,IAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAEP,QAAF,EAAYC,YAAZ,EAA0BY,GAA1B,EAAmC;AAElE,SAAQ;AACPC,IAAAA,SAAS,EAAEd,QAAQ,CAACc,SADb;AAEPC,IAAAA,KAAK,EAAEf,QAAQ,CAACe,KAFT;AAGPC,IAAAA,IAAI,EAAEhB,QAAQ,CAACgB,IAHR;AAIPC,IAAAA,KAAK,EAAEhB,YAJA;AAKPY,IAAAA,GAAG,EAAHA,GALO;AAMPK,IAAAA,UAAU,EAAErB,UAAU,CAAE,CAAEI,YAAY,GAAGY,GAAjB,EAAuBf,OAAvB,CAAgC,CAAhC,CAAF;AANf,GAAR;AASA,CAXM;AAaP,OAAO,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAAEC,YAAF,EAAgBC,OAAhB,EAAyBC,YAAzB,EAA4D;AAAA,MAArBC,MAAqB,uEAAZ,KAAY;AAErF,MAAMC,eAAe,GAAGC,kBAAkB,CAAEL,YAAY,CAACpB,QAAf,EAA0BqB,OAA1B,EAAmCC,YAAnC,EAAiDC,MAAjD,CAA1C;;AAEA,MAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,IAAR,EAAiB;AACjCD,IAAAA,KAAK,CAACT,UAAN,IAAoBU,IAAI,CAACV,UAAzB;AACAS,IAAAA,KAAK,CAACd,GAAN,IAAae,IAAI,CAACf,GAAlB;AAEA,WAAOc,KAAP;AACA,GALD,CAJqF,CAWrF;;;AACA,MAAIA,KAAK,GAAGH,eAAe,CAACK,MAAhB,CAAwBH,QAAxB,EAAkC;AAAER,IAAAA,UAAU,EAAE,CAAd;AAAiBL,IAAAA,GAAG,EAAE;AAAtB,GAAlC,CAAZ;AAEA,MAAMiB,WAAW,GAAG;AACnB9B,IAAAA,QAAQ,EAAEwB,eADS;AAEnBpB,IAAAA,kBAAkB,EAAE2B,QAAQ,CAAEJ,KAAK,CAACd,GAAR,CAFT;AAGnBR,IAAAA,kBAAkB,EAAER,UAAU,CAAE8B,KAAK,CAACT,UAAR;AAHX,GAApB;AAMAT,EAAAA,YAAY,CAACC,OAAb,CAAsB,eAAtB,EAAuCC,IAAI,CAACC,SAAL,CAAgBkB,WAAhB,CAAvC;AAEA,SAAOA,WAAP;AACA,CAvBM","sourcesContent":["export const getFloatVal = ( string ) => {\n\n\tlet floatValue = string.match( /[+-]?\\d+(\\.\\d+)?/g )[0];\n\treturn ( null !== floatValue ) ? parseFloat( parseFloat( floatValue ).toFixed( 2 ) ) : '';\n\n};\n\n/**\n * Add first product.\n *\n * @param {Object} product Product\n * @return {{totalProductsCount: number, totalProductsPrice: any, products: Array}}\n */\nexport const addFirstProduct = ( products ) => {\n\n\tlet productPrice = getFloatVal( products.salePrice );\n\n\tlet newCart = {\n\t\tproducts: [],\n\t\ttotalProductsCount: 1,\n\t\ttotalProductsPrice: productPrice\n\t};\n\n\tconst newProduct = createNewProduct( products, productPrice, 1 );\n\tnewCart.products.push( newProduct );\n\n\tlocalStorage.setItem( 'keymoji-cart', JSON.stringify( newCart ) );\n\n\treturn newCart;\n};\n\nexport const createNewProduct = ( products, productPrice, qty ) => {\n\n\treturn  {\n\t\tproductId: products.productId,\n\t\timage: products.image,\n\t\tname: products.name,\n\t\tprice: productPrice,\n\t\tqty,\n\t\ttotalPrice: parseFloat( ( productPrice * qty ).toFixed( 2 ) )\n\t};\n\n};\n\nexport const updateCart = ( existingCart, product, qtyToBeAdded, newQty = false  ) => {\n\n\tconst updatedProducts = getUpdatedProducts( existingCart.products , product, qtyToBeAdded, newQty );\n\n\tconst addPrice = (total, item) => {\n\t\ttotal.totalPrice += item.totalPrice;\n\t\ttotal.qty += item.qty;\n\n\t\treturn total;\n\t};\n\n\t// Loop through the updated product array and add the totalPrice of each item to get the totalPrice\n\tlet total = updatedProducts.reduce( addPrice, { totalPrice: 0, qty: 0 } );\n\n\tconst updatedCart = {\n\t\tproducts: updatedProducts,\n\t\ttotalProductsCount: parseInt( total.qty ),\n\t\ttotalProductsPrice: parseFloat( total.totalPrice )\n\t};\n\n\tlocalStorage.setItem( 'woo-next-cart', JSON.stringify( updatedCart ) );\n\n\treturn updatedCart;\n};\n"]},"metadata":{},"sourceType":"module"}